üéØ TASK: Implement Timeline Feature - Phase 5-6-7 (Frontend & Finalization)
Plugin: Restaurant Booking Manager
Requires: Phase 1-4 completed & tested ‚úÖ

üìã REQUIREMENTS:

=== PHASE 5: FRONTEND BOOKING FORM ENHANCEMENT ===

File: public/class-frontend.php (ho·∫∑c t·∫°o public/class-timeline-booking.php)

üîß Add/Modify methods:

1Ô∏è‚É£ MODIFY: render_booking_form() method
   
   Add new section tr∆∞·ªõc "Check Availability" button:
   
   HTML Structure:
```html
   <div class="rb-time-selection-section">
       <h3>‚è∞ Ch·ªçn Th·ªùi Gian ƒê·∫∑t B√†n</h3>
       
       <div class="rb-form-row">
           <label for="rb-checkin-time">
               üïê Gi·ªù Nh·∫≠n B√†n (Check-in) *
           </label>
           <select id="rb-checkin-time" name="checkin_time" required>
               <option value="">-- Ch·ªçn gi·ªù --</option>
               <!-- Populated by JS based on location working hours -->
           </select>
           <small class="rb-hint">Kh√°ch c√≥ th·ªÉ t·ªõi s·ªõm/mu·ªôn 15 ph√∫t</small>
       </div>
       
       <div class="rb-form-row">
           <label for="rb-duration">
               ‚è±Ô∏è Th·ªùi Gian ·ªû L·∫°i *
           </label>
           <select id="rb-duration" name="duration" required>
               <option value="">-- Ch·ªçn th·ªùi l∆∞·ª£ng --</option>
               <option value="1">1 gi·ªù</option>
               <option value="1.5">1.5 gi·ªù</option>
               <option value="2">2 gi·ªù (Khuy√™n d√πng)</option>
               <option value="2.5">2.5 gi·ªù</option>
               <option value="3">3 gi·ªù</option>
               <option value="3.5">3.5 gi·ªù</option>
               <option value="4">4 gi·ªù</option>
               <option value="5">5 gi·ªù</option>
               <option value="6">6 gi·ªù</option>
           </select>
       </div>
       
       <div class="rb-time-display">
           <p>
               <strong>üìã Th·ªëng k√™:</strong><br>
               Gi·ªù v√†o: <span id="rb-display-checkin">--:--</span><br>
               Gi·ªù ra: <span id="rb-display-checkout">--:--</span><br>
               Th·ª±c t·∫ø s·∫Ω s√°ng b√†n l√∫c: <span id="rb-display-cleanup">--:--</span>
           </p>
       </div>
   </div>
```

2Ô∏è‚É£ Add new method: get_location_time_slots()
   
   Logic:
```php
   public function get_location_time_slots($location_id) {
       global $rb_location;
       
       if (!$rb_location) {
           require_once RB_PLUGIN_DIR . 'includes/class-location.php';
           $rb_location = new RB_Location();
       }
       
       $settings = $rb_location->get_settings($location_id);
       
       // Generate time slots based on location settings
       // Return: array('09:00', '09:30', '10:00', ...)
   }
```

3Ô∏è‚É£ Add new AJAX handler (ho·∫∑c add v√†o includes/class-ajax.php):
   
   Handler name: wp_ajax_rb_get_checkout_time
   
   Purpose: Calculate checkout_time based on checkin_time + duration
   
   Logic:
```php
   public function get_checkout_time() {
       check_ajax_referer('rb_frontend_nonce', 'nonce');
       
       $checkin_time = sanitize_text_field($_POST['checkin_time']);
       $duration = floatval($_POST['duration']);
       
       // Convert time to minutes
       list($h, $m) = explode(':', $checkin_time);
       $minutes = ($h * 60) + $m + ($duration * 60);
       
       // Convert back to HH:MM
       $checkout_hour = floor($minutes / 60);
       $checkout_min = $minutes % 60;
       $checkout_time = sprintf('%02d:%02d', $checkout_hour, $checkout_min);
       
       // Calculate cleanup end time (checkout + 15' + 1h)
       $cleanup_end = date('H:i', 
           strtotime($checkout_time) + (15 * 60) + (60 * 60)
       );
       
       wp_send_json_success(array(
           'checkout_time' => $checkout_time,
           'cleanup_end' => $cleanup_end
       ));
   }
```

4Ô∏è‚É£ MODIFY: check_availability() AJAX method
   
   Add parameters:
   - checkin_time (string HH:MM)
   - checkout_time (string HH:MM)
   - duration (float)
   
   Call: is_time_slot_available() with checkin/checkout
   
   Response must include:
```php
   {
       'available': true/false,
       'message': '...',
       'available_tables': 5,
       'checkin_time': '10:00',
       'checkout_time': '12:00',
       'cleanup_time': '13:15'
   }
```

5Ô∏è‚É£ Add new method: get_alternative_times()
   
   Purpose: Suggest alternative times if selected slot unavailable
   
   Logic:
```php
   public function get_alternative_times($location_id, $date, $checkin_time, $duration, $guest_count) {
       global $rb_booking;
       
       // Try ¬±30min, ¬±1hour, ¬±1.5hour
       $offsets = [-90, -60, -30, 30, 60, 90]; // minutes
       $alternatives = [];
       
       foreach ($offsets as $offset) {
           $alt_checkin = date('H:i', 
               strtotime($checkin_time) + ($offset * 60)
           );
           $alt_checkout = date('H:i',
               strtotime($alt_checkin) + ($duration * 3600)
           );
           
           if ($rb_booking->is_time_slot_available(
               $date, $alt_checkin, $alt_checkout, 
               $guest_count, null, $location_id
           )) {
               $alternatives[] = [
                   'checkin' => $alt_checkin,
                   'checkout' => $alt_checkout,
                   'diff_minutes' => $offset
               ];
           }
           
           if (count($alternatives) >= 2) break;
       }
       
       return $alternatives;
   }
```

6Ô∏è‚É£ MODIFY: create_booking() method
   
   Add parameters:
   - $checkin_time (string)
   - $checkout_time (string)
   
   Pass to RB_Booking::create_booking():
```php
   $booking_data = array(
       // ... existing fields ...
       'checkin_time' => $checkin_time,
       'checkout_time' => $checkout_time,
       // ... rest ...
   );
```

---

=== PHASE 5B: FRONTEND JAVASCRIPT ===

File: assets/js/timeline-booking.js (new file)
```javascript
class RBTimelineBooking {
    constructor(config) {
        this.ajaxUrl = config.ajaxUrl;
        this.nonce = config.nonce;
        this.locations = config.locations || [];
        
        this.init();
    }
    
    init() {
        this.populateTimeSlots();
        this.bindEvents();
    }
    
    bindEvents() {
        // Location change
        jQuery('#rb-location').on('change', () => {
            this.populateTimeSlots();
            this.clearTimeDisplay();
        });
        
        // Check-in time change
        jQuery('#rb-checkin-time').on('change', () => {
            this.updateCheckoutAndCleanup();
        });
        
        // Duration change
        jQuery('#rb-duration').on('change', () => {
            this.updateCheckoutAndCleanup();
        });
        
        // Check availability button
        jQuery('#rb-check-availability').on('click', (e) => {
            e.preventDefault();
            this.checkAvailability();
        });
    }
    
    populateTimeSlots() {
        const locationId = jQuery('#rb-location').val();
        const location = this.locations.find(l => l.id == locationId);
        
        if (!location) return;
        
        const slots = this.generateTimeSlots(
            location.opening_time,
            location.closing_time,
            location.time_slot_interval
        );
        
        const $select = jQuery('#rb-checkin-time');
        $select.empty();
        $select.append('<option value="">-- Ch·ªçn gi·ªù --</option>');
        
        slots.forEach(slot => {
            $select.append(`<option value="${slot}">${slot}</option>`);
        });
    }
    
    generateTimeSlots(start, end, interval) {
        const slots = [];
        let current = this.timeToMinutes(start);
        const endMin = this.timeToMinutes(end);
        
        while (current <= endMin) {
            slots.push(this.minutesToTime(current));
            current += interval;
        }
        
        return slots;
    }
    
    timeToMinutes(time) {
        const [h, m] = time.split(':').map(Number);
        return h * 60 + m;
    }
    
    minutesToTime(minutes) {
        const h = Math.floor(minutes / 60);
        const m = minutes % 60;
        return `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}`;
    }
    
    updateCheckoutAndCleanup() {
        const checkinTime = jQuery('#rb-checkin-time').val();
        const duration = parseFloat(jQuery('#rb-duration').val());
        
        if (!checkinTime || !duration) {
            this.clearTimeDisplay();
            return;
        }
        
        jQuery.ajax({
            url: this.ajaxUrl,
            type: 'POST',
            data: {
                action: 'rb_get_checkout_time',
                checkin_time: checkinTime,
                duration: duration,
                nonce: this.nonce
            },
            success: (response) => {
                if (response.success) {
                    jQuery('#rb-display-checkin').text(checkinTime);
                    jQuery('#rb-display-checkout').text(response.data.checkout_time);
                    jQuery('#rb-display-cleanup').text(response.data.cleanup_end);
                }
            }
        });
    }
    
    clearTimeDisplay() {
        jQuery('#rb-display-checkin').text('--:--');
        jQuery('#rb-display-checkout').text('--:--');
        jQuery('#rb-display-cleanup').text('--:--');
    }
    
    checkAvailability() {
        const date = jQuery('#rb-booking-date').val();
        const checkinTime = jQuery('#rb-checkin-time').val();
        const duration = parseFloat(jQuery('#rb-duration').val());
        const guests = parseInt(jQuery('#rb-guest-count').val());
        const locationId = jQuery('#rb-location').val();
        
        if (!date || !checkinTime || !duration || !guests) {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
            return;
        }
        
        // Calculate checkout time
        const checkoutMin = this.timeToMinutes(checkinTime) + (duration * 60);
        const checkoutTime = this.minutesToTime(checkoutMin);
        
        jQuery.ajax({
            url: this.ajaxUrl,
            type: 'POST',
            data: {
                action: 'rb_check_availability_extended',
                date: date,
                checkin_time: checkinTime,
                checkout_time: checkoutTime,
                guest_count: guests,
                location_id: locationId,
                nonce: this.nonce
            },
            success: (response) => {
                if (response.success) {
                    if (response.data.available) {
                        this.showAvailabilitySuccess(response.data);
                    } else {
                        this.showAvailabilityFailed(response.data);
                    }
                }
            }
        });
    }
    
    showAvailabilitySuccess(data) {
        jQuery('#rb-availability-message').html(`
            <div class="rb-success-message">
                <strong>‚úÖ C√≤n b√†n!</strong><br>
                Hi·ªán c√≥ ${data.available_count} b√†n ph√π h·ª£p<br>
                <button type="submit" class="button button-primary">
                    Ti·∫øp t·ª•c ƒë·∫∑t b√†n
                </button>
            </div>
        `).show();
    }
    
    showAvailabilityFailed(data) {
        const message = data.message || 'Khong co ban trong khoanh gio nay';
        let html = `
            <div class="rb-error-message">
                <strong>‚ùå ${message}</strong>
        `;
        
        if (data.alternatives && data.alternatives.length > 0) {
            html += '<p><strong>üí° G·ª£i √Ω:</strong></p>';
            data.alternatives.forEach(alt => {
                html += `
                    <button type="button" class="rb-alternative-time" 
                        data-checkin="${alt.checkin}"
                        data-checkout="${alt.checkout}">
                        ${alt.checkin} - ${alt.checkout}
                    </button>
                `;
            });
        }
        
        html += '</div>';
        
        jQuery('#rb-availability-message').html(html).show();
        
        // Bind alternative time buttons
        jQuery('.rb-alternative-time').on('click', (e) => {
            e.preventDefault();
            const checkin = jQuery(e.target).data('checkin');
            const checkout = jQuery(e.target).data('checkout');
            
            jQuery('#rb-checkin-time').val(checkin);
            // Update duration based on checkout
            const duration = (this.timeToMinutes(checkout) - this.timeToMinutes(checkin)) / 60;
            jQuery('#rb-duration').val(duration);
            
            this.checkAvailability();
        });
    }
}

// Initialize
jQuery(document).ready(function() {
    if (typeof rbBookingAjax !== 'undefined' && rbBookingAjax.locations) {
        new RBTimelineBooking({
            ajaxUrl: rbBookingAjax.ajaxUrl,
            nonce: rbBookingAjax.nonce,
            locations: rbBookingAjax.locations
        });
    }
});
```

---

=== PHASE 6: ASSETS AND STYLING ===

File 1: assets/css/timeline.css (UPDATE existing)
File 2: assets/css/timeline-booking.css (new file)
```css
/* Timeline Booking Form Styles */

.rb-time-selection-section {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 2px solid #dee2e6;
    border-radius: 8px;
    padding: 25px;
    margin: 25px 0;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
}

.rb-time-selection-section h3 {
    margin-top: 0;
    color: #2c3e50;
    font-size: 18px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    border-bottom: 2px solid #3498db;
    padding-bottom: 12px;
}

.rb-form-row {
    margin-bottom: 20px;
}

.rb-form-row:last-of-type {
    margin-bottom: 0;
}

.rb-form-row label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: #2c3e50;
    font-size: 14px;
}

.rb-form-row select {
    width: 100%;
    padding: 12px;
    border: 1px solid #bdc3c7;
    border-radius: 4px;
    font-size: 14px;
    background: white;
    cursor: pointer;
    transition: all 0.3s ease;
}

.rb-form-row select:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
}

.rb-form-row select:hover {
    border-color: #3498db;
}

.rb-hint {
    display: block;
    margin-top: 6px;
    font-size: 12px;
    color: #7f8c8d;
    font-style: italic;
}

.rb-time-display {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    padding: 15px;
    margin-top: 20px;
}

.rb-time-display p {
    margin: 0;
    font-size: 14px;
    line-height: 1.8;
    color: #2c3e50;
}

.rb-time-display strong {
    color: #e74c3c;
    font-size: 15px;
}

.rb-time-display span {
    background: #ecf0f1;
    padding: 4px 8px;
    border-radius: 3px;
    font-weight: 600;
    color: #2980b9;
    font-family: 'Courier New', monospace;
}

/* Availability Messages */
.rb-availability-message {
    margin-top: 20px;
}

.rb-success-message {
    background: #d4edda;
    border: 2px solid #28a745;
    border-radius: 6px;
    padding: 15px;
    color: #155724;
    font-size: 14px;
    line-height: 1.6;
}

.rb-success-message strong {
    display: block;
    font-size: 16px;
    margin-bottom: 8px;
}

.rb-success-message .button {
    margin-top: 12px;
}

.rb-error-message {
    background: #f8d7da;
    border: 2px solid #dc3545;
    border-radius: 6px;
    padding: 15px;
    color: #721c24;
    font-size: 14px;
    line-height: 1.6;
}

.rb-error-message strong {
    display: block;
    font-size: 16px;
    margin-bottom: 8px;
}

.rb-error-message p {
    margin: 12px 0 8px 0;
    font-weight: 600;
}

/* Alternative Time Buttons */
.rb-alternative-time {
    display: inline-block;
    margin: 5px 10px 5px 0;
    padding: 10px 15px;
    background: #3498db;
    color: white;
    border: 2px solid #2980b9;
    border-radius: 4px;
    cursor: pointer;
    font-size: 13px;
    font-weight: 600;
    transition: all 0.3s ease;
}

.rb-alternative-time:hover {
    background: #2980b9;
    border-color: #1a5276;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(52, 152, 219, 0.3);
}

.rb-alternative-time:active {
    transform: translateY(0);
}

/* Responsive */
@media (max-width: 768px) {
    .rb-time-selection-section {
        padding: 20px;
        margin: 20px 0;
    }
    
    .rb-time-selection-section h3 {
        font-size: 16px;
    }
    
    .rb-form-row {
        margin-bottom: 16px;
    }
    
    .rb-form-row label {
        font-size: 13px;
    }
    
    .rb-form-row select {
        padding: 10px;
        font-size: 14px;
    }
    
    .rb-time-display {
        padding: 12px;
    }
    
    .rb-time-display p {
        font-size: 13px;
    }
    
    .rb-alternative-time {
        display: block;
        width: 100%;
        margin: 8px 0;
        text-align: center;
    }
}

@media (max-width: 480px) {
    .rb-time-selection-section {
        padding: 15px;
    }
    
    .rb-success-message,
    .rb-error-message {
        padding: 12px;
    }
}
```

File 3: Update assets/js/new-booking.js (if exists)

Add timeline-booking.js to enqueue:
```php
// File: includes/class-assets-manager.php
public function enqueue_frontend_assets() {
    // ... existing code ...
    
    // Enqueue timeline booking script
    $timeline_path = RB_PLUGIN_DIR . 'assets/js/timeline-booking.js';
    $timeline_version = file_exists($timeline_path) ? filemtime($timeline_path) : RB_VERSION;
    wp_enqueue_script(
        'rb-timeline-booking',
        RB_PLUGIN_URL . 'assets/js/timeline-booking.js',
        array('jquery'),
        $timeline_version,
        true
    );
}
```

---

=== PHASE 7: LANGUAGE SUPPORT INTEGRATION ===

File: languages/vi_VN/translations.php (UPDATE)
File: languages/en_US/translations.php (UPDATE)
File: languages/ja_JP/translations.php (UPDATE)

üîß Add new translation keys:

**Vietnamese (vi_VN):**
```php
// Th√™m v√†o array translations:
'check_in_time' => 'Gi·ªù Nh·∫≠n B√†n (Check-in)',
'duration' => 'Th·ªùi Gian ·ªû L·∫°i',
'duration_1h' => '1 gi·ªù',
'duration_1_5h' => '1.5 gi·ªù',
'duration_2h' => '2 gi·ªù (Khuy√™n d√πng)',
'duration_2_5h' => '2.5 gi·ªù',
'duration_3h' => '3 gi·ªù',
'duration_3_5h' => '3.5 gi·ªù',
'duration_4h' => '4 gi·ªù',
'duration_5h' => '5 gi·ªù',
'duration_6h' => '6 gi·ªù',
'booking_stats' => 'Th·ªëng k√™',
'check_in_time_label' => 'Gi·ªù v√†o',
'check_out_time_label' => 'Gi·ªù ra',
'table_ready_time' => 'Th·ª±c t·∫ø s·∫Ω s√°ng b√†n l√∫c',
'early_late_note' => 'Kh√°ch c√≥ th·ªÉ t·ªõi s·ªõm/mu·ªôn 15 ph√∫t',
'select_time_hint' => '-- Ch·ªçn gi·ªù --',
'select_duration_hint' => '-- Ch·ªçn th·ªùi l∆∞·ª£ng --',
'availability_available' => '‚úÖ C√≤n b√†n!',
'availability_tables_count' => 'Hi·ªán c√≥ {count} b√†n ph√π h·ª£p',
'continue_booking' => 'Ti·∫øp t·ª•c ƒë·∫∑t b√†n',
'availability_not_available' => '‚ùå H·∫øt b√†n trong khung gi·ªù n√†y',
'alternative_suggestions' => 'üí° G·ª£i √Ω:',
'select_alternative_time' => 'Ch·ªçn gi·ªù kh√°c',
'customer_can_arrive_early_late' => 'Kh√°ch c√≥ th·ªÉ t·ªõi s·ªõm/mu·ªôn 15 ph√∫t',
'cleanup_time_info' => 'B√†n c·∫ßn 1 gi·ªù ƒë·ªÉ d·ªçn d·∫πp sau khi kh√°ch ra',
```

**English (en_US):**
```php
'check_in_time' => 'Check-in Time',
'duration' => 'Duration',
'duration_1h' => '1 hour',
'duration_1_5h' => '1.5 hours',
'duration_2h' => '2 hours (Recommended)',
'duration_2_5h' => '2.5 hours',
'duration_3h' => '3 hours',
'duration_3_5h' => '3.5 hours',
'duration_4h' => '4 hours',
'duration_5h' => '5 hours',
'duration_6h' => '6 hours',
'booking_stats' => 'Booking Summary',
'check_in_time_label' => 'Check-in time',
'check_out_time_label' => 'Check-out time',
'table_ready_time' => 'Table will be ready at',
'early_late_note' => 'Customers can arrive 15 minutes early or late',
'select_time_hint' => '-- Select time --',
'select_duration_hint' => '-- Select duration --',
'availability_available' => '‚úÖ Tables available!',
'availability_tables_count' => '{count} tables available',
'continue_booking' => 'Continue booking',
'availability_not_available' => '‚ùå No tables available at this time',
'alternative_suggestions' => 'üí° Suggestions:',
'select_alternative_time' => 'Select alternative time',
```

**Japanese (ja_JP):**
```php
'check_in_time' => '„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥ÊôÇÈñì',
'duration' => 'Âà©Áî®ÊôÇÈñì',
'duration_1h' => '1 ÊôÇÈñì',
'duration_1_5h' => '1.5 ÊôÇÈñì',
'duration_2h' => '2 ÊôÇÈñìÔºàÊé®Â•®Ôºâ',
'duration_2_5h' => '2.5 ÊôÇÈñì',
'duration_3h' => '3 ÊôÇÈñì',
'duration_3_5h' => '3.5 ÊôÇÈñì',
'duration_4h' => '4 ÊôÇÈñì',
'duration_5h' => '5 ÊôÇÈñì',
'duration_6h' => '6 ÊôÇÈñì',
'booking_stats' => '‰∫àÁ¥ÑÊ¶ÇË¶Å',
'check_in_time_label' => '„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥ÊôÇÂàª',
'check_out_time_label' => '„ÉÅ„Çß„ÉÉ„ÇØ„Ç¢„Ç¶„ÉàÊôÇÂàª',
'table_ready_time' => '„ÉÜ„Éº„Éñ„É´„ÅÆÊ∫ñÂÇôÂÆå‰∫ÜÊôÇÂàª',
'early_late_note' => '„ÅäÂÆ¢Êßò„ÅØ 15 ÂàÜÊó©„ÅèÂà∞ÁùÄ„Åô„Çã„Åì„Å®„ÇÇ„Åß„Åç„Åæ„Åô',
'select_time_hint' => '-- ÊôÇÈñì„ÇíÈÅ∏Êäû --',
'select_duration_hint' => '-- ÊúüÈñì„ÇíÈÅ∏Êäû --',
'availability_available' => '‚úÖ „ÉÜ„Éº„Éñ„É´Âà©Áî®ÂèØËÉΩ',
'availability_tables_count' => '{count} „ÉÜ„Éº„Éñ„É´„ÅåÂà©Áî®ÂèØËÉΩ„Åß„Åô',
'continue_booking' => '‰∫àÁ¥Ñ„ÇíÁ∂öË°å',
'availability_not_available' => '‚ùå „Åì„ÅÆÊôÇÈñì„Å´„ÅØ„ÉÜ„Éº„Éñ„É´„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì',
'alternative_suggestions' => 'üí° „Åä„Åô„Åô„ÇÅ:',
'select_alternative_time' => 'Âà•„ÅÆÊôÇÈñì„ÇíÈÅ∏Êäû',
```

---

üß™ TEST CASES (Phase 5-6-7):

Frontend Form:
‚òê Time slots populated correctly
‚òê Duration selector works
‚òê Time display updates dynamically
‚òê Checkout time calculated correctly
‚òê Cleanup time = checkout + 15' + 1h

Availability Check:
‚òê Available slot ‚Üí show success
‚òê Unavailable slot ‚Üí show error
‚òê Alternative suggestions appear
‚òê Click alternative ‚Üí select those times
‚òê Response includes availability count

AJAX Calls:
‚òê get_checkout_time returns correct times
‚òê check_availability_extended validates correctly
‚òê Error handling for invalid inputs
‚òê Nonce verification works

Styling:
‚òê Desktop: form displays nicely
‚òê Tablet: responsive layout works
‚òê Mobile: buttons clickable
‚òê Colors match design
‚òê Messages clear & readable

Translations:
‚òê All keys translated to 3 languages
‚òê Language switcher changes form text
‚òê No untranslated strings visible
‚òê Plurals handled correctly (tables, hours)

Integration:
‚òê Works with existing booking form
‚òê Data passed correctly to backend
‚òê Booking saved with checkin/checkout times
‚òê No breaking changes
‚òê Works with timeline admin view

---

‚ö†Ô∏è CRITICAL POINTS:

‚úÖ Frontend Validation:
- Duration: 1-6 hours only
- Checkout must be after checkin
- Checkout must be during working hours
- Check capacity availability

‚úÖ UX/DX:
- Clear error messages
- Helpful suggestions
- Mobile-friendly
- Keyboard accessible

‚úÖ Performance:
- AJAX calls debounced
- No unnecessary re-renders
- Alternative times calculated efficiently

‚úÖ Accessibility:
- Form labels for all inputs
- ARIA attributes where needed
- Keyboard navigation works
- Color not only indicator

‚úÖ Backwards Compatibility:
- Existing bookings still work
- Optional checkin/checkout params
- Default values sensible (2 hours)

---

üì¶ DELIVERABLES (Phase 5-6-7):

1. Frontend form with time selection
2. All AJAX endpoints for frontend
3. Alternative time suggestions
4. Custom styling (CSS responsive)
5. JavaScript class well-structured
6. All translations (3 languages)
7. No breaking changes
8. All features tested & working
9. Ready for full integration

---

üöÄ FINAL IMPLEMENTATION PRIORITY:

Phase 5:
1. Modify render_booking_form() add time section
2. Add get_location_time_slots()
3. Add get_checkout_time() AJAX handler
4. Modify check_availability() for checkin/checkout
5. Add get_alternative_times()
6. Modify create_booking() signature

Phase 6:
1. Create timeline-booking.css (responsive)
2. Create timeline-booking.js (class RBTimelineBooking)
3. Enqueue in assets manager
4. Style all UI components
5. Mobile responsive testing
6. Browser compatibility check

Phase 7:
1. Add all translation keys (3 languages)
2. Update translations files
3. Use rb_t() for all strings
4. Test all languages
5. Check plural forms
6. Date/time localization

---

‚ö†Ô∏è IMPORTANT NOTES:

1. Duration calculation:
```php
   checkout_time = checkin_time + (duration * 60 minutes)
```

Time validation:

Checkout must be ‚â§ location closing_time
Duration must be 1-6 hours
Must respect location working hours


Alternative times logic:

Try offsets: -90, -60, -30, +30, +60, +90 minutes
Stop after finding 2 valid alternatives
Suggest closest times first


Translation keys:

Use dot notation for context: 'booking.checkin_time'
Keep keys short but descriptive
Always provide English fallback
Test with longest language (Japanese/Vietnamese)


Mobile considerations:

Tap targets min 44px
Form fields must be large enough
Scrollable alternatives list
Landscape mode support


Performance tips:

Cache time slots per location
Debounce availability checks (500ms)
Use requestAnimationFrame for DOM updates
Lazy load translations




üìã INTEGRATION WITH PHASE 1-4
Phase 5-7 depends on Phase 1-4:

‚úÖ Database schema (Phase 1)
‚úÖ Backend methods (Phase 2): is_time_slot_available(), get_timeline_data()
‚úÖ AJAX endpoints (Phase 3): check_availability_extended()
‚úÖ Admin timeline (Phase 4): not needed for frontend but shares infrastructure


üîß UPDATE EXISTING FILES
File: includes/class-ajax.php
Add new methods or update existing:
php/**
 * Get checkout time based on checkin + duration
 */
public function get_checkout_time() {
    check_ajax_referer('rb_frontend_nonce', 'nonce');
    
    $checkin_time = sanitize_text_field($_POST['checkin_time']);
    $duration = floatval($_POST['duration']);
    
    if (!$checkin_time || !$duration) {
        wp_send_json_error(array('message' => 'Invalid parameters'));
    }
    
    // Convert to minutes
    list($h, $m) = explode(':', $checkin_time);
    $checkin_minutes = ($h * 60) + $m;
    
    // Add duration
    $checkout_minutes = $checkin_minutes + ($duration * 60);
    
    // Validate within 24 hours
    if ($checkout_minutes >= 1440) {
        $checkout_minutes -= 1440; // Next day
    }
    
    // Convert back to HH:MM
    $checkout_hour = intval($checkout_minutes / 60);
    $checkout_min = intval($checkout_minutes % 60);
    $checkout_time = sprintf('%02d:%02d', $checkout_hour, $checkout_min);
    
    // Calculate cleanup end (checkout + 15' + 1h)
    $cleanup_minutes = $checkout_minutes + 15 + 60;
    if ($cleanup_minutes >= 1440) {
        // Next day - just show time
        $cleanup_minutes -= 1440;
    }
    
    $cleanup_hour = intval($cleanup_minutes / 60);
    $cleanup_min = intval($cleanup_minutes % 60);
    $cleanup_end = sprintf('%02d:%02d', $cleanup_hour, $cleanup_min);
    
    wp_send_json_success(array(
        'checkout_time' => $checkout_time,
        'cleanup_end' => $cleanup_end
    ));
}

/**
 * MODIFY: check_availability for frontend with checkin/checkout
 */
public function check_availability_extended() {
    check_ajax_referer('rb_frontend_nonce', 'nonce');
    
    $date = sanitize_text_field($_POST['date']);
    $checkin_time = sanitize_text_field($_POST['checkin_time']);
    $checkout_time = sanitize_text_field($_POST['checkout_time']);
    $guest_count = intval($_POST['guest_count']);
    $location_id = intval($_POST['location_id']);
    
    global $rb_booking;
    
    $available = $rb_booking->is_time_slot_available(
        $date,
        $checkin_time,
        $checkout_time,
        $guest_count,
        null,
        $location_id
    );
    
    if ($available) {
        $available_count = $rb_booking->available_table_count(
            $date, $checkin_time, $guest_count, $location_id
        );
        
        wp_send_json_success(array(
            'available' => true,
            'message' => rb_t('tables_available', 'Tables available'),
            'available_count' => $available_count,
            'checkin_time' => $checkin_time,
            'checkout_time' => $checkout_time
        ));
    } else {
        // Get alternatives
        global $rb_frontend;
        if (!$rb_frontend) {
            require_once RB_PLUGIN_DIR . 'public/class-frontend.php';
            $rb_frontend = new RB_Frontend();
        }
        
        $alternatives = $rb_frontend->get_alternative_times(
            $location_id,
            $date,
            $checkin_time,
            ($this->timeToMinutes($checkout_time) - $this->timeToMinutes($checkin_time)) / 60,
            $guest_count
        );
        
        wp_send_json_success(array(
            'available' => false,
            'message' => rb_t('no_tables_available', 'No tables available'),
            'alternatives' => $alternatives
        ));
    }
}

// Helper method
private function timeToMinutes($time) {
    list($h, $m) = explode(':', $time);
    return ($h * 60) + $m;
}
File: public/class-frontend.php
Add these methods:
php/**
 * Get alternative times when slot unavailable
 */
public function get_alternative_times($location_id, $date, $checkin_time, $duration, $guest_count) {
    global $rb_booking;
    
    $alternatives = [];
    $offsets = [-90, -60, -30, 30, 60, 90]; // minutes
    $max_alternatives = 2;
    
    foreach ($offsets as $offset) {
        // Calculate alternative times
        $alt_checkin_min = $this->timeToMinutes($checkin_time) + $offset;
        
        // Handle day boundary
        if ($alt_checkin_min < 0) {
            $alt_checkin_min += 1440;
        } elseif ($alt_checkin_min >= 1440) {
            $alt_checkin_min -= 1440;
        }
        
        $alt_checkin = $this->minutesToTime($alt_checkin_min);
        $alt_checkout_min = $alt_checkin_min + ($duration * 60);
        
        if ($alt_checkout_min >= 1440) {
            $alt_checkout_min -= 1440;
        }
        
        $alt_checkout = $this->minutesToTime($alt_checkout_min);
        
        // Check if available
        $is_available = $rb_booking->is_time_slot_available(
            $date,
            $alt_checkin,
            $alt_checkout,
            $guest_count,
            null,
            $location_id
        );
        
        if ($is_available) {
            $alternatives[] = [
                'checkin' => $alt_checkin,
                'checkout' => $alt_checkout,
                'diff_minutes' => $offset
            ];
            
            if (count($alternatives) >= $max_alternatives) {
                break;
            }
        }
    }
    
    return $alternatives;
}

/**
 * Helper: Convert time to minutes
 */
private function timeToMinutes($time) {
    list($h, $m) = explode(':', $time);
    return ($h * 60) + $m;
}

/**
 * Helper: Convert minutes to time
 */
private function minutesToTime($minutes) {
    $h = intval($minutes / 60);
    $m = intval($minutes % 60);
    return sprintf('%02d:%02d', $h, $m);
}

/**
 * Get location time slots
 */
public function get_location_time_slots($location_id) {
    global $rb_location;
    
    if (!$rb_location) {
        require_once RB_PLUGIN_DIR . 'includes/class-location.php';
        $rb_location = new RB_Location();
    }
    
    $settings = $rb_location->get_settings($location_id);
    
    if (empty($settings)) {
        return [];
    }
    
    $opening = $settings['opening_time'] ?? '09:00';
    $closing = $settings['closing_time'] ?? '22:00';
    $interval = intval($settings['time_slot_interval'] ?? 30);
    
    $slots = [];
    $current = $this->timeToMinutes($opening);
    $end = $this->timeToMinutes($closing);
    
    while ($current <= $end) {
        $slots[] = $this->minutesToTime($current);
        $current += $interval;
    }
    
    return $slots;
}
File: includes/class-assets-manager.php
Update enqueue to include timeline-booking:
phppublic function enqueue_frontend_assets() {
    if (!$this->should_enqueue_assets()) {
        return;
    }

    // Existing CSS
    $style_path = RB_PLUGIN_DIR . 'assets/css/new-frontend.css';
    $style_version = file_exists($style_path) ? filemtime($style_path) : RB_VERSION;
    wp_enqueue_style(
        'rb-new-frontend',
        RB_PLUGIN_URL . 'assets/css/new-frontend.css',
        array(),
        $style_version
    );

    // ‚úÖ NEW: Timeline booking styles
    $timeline_style_path = RB_PLUGIN_DIR . 'assets/css/timeline-booking.css';
    $timeline_style_version = file_exists($timeline_style_path) ? filemtime($timeline_style_path) : RB_VERSION;
    wp_enqueue_style(
        'rb-timeline-booking',
        RB_PLUGIN_URL . 'assets/css/timeline-booking.css',
        array('rb-new-frontend'),
        $timeline_style_version
    );

    // Existing JS
    $script_path = RB_PLUGIN_DIR . 'assets/js/new-booking.js';
    $script_version = file_exists($script_path) ? filemtime($script_path) : RB_VERSION;
    wp_enqueue_script(
        'rb-new-booking',
        RB_PLUGIN_URL . 'assets/js/new-booking.js',
        array('jquery'),
        $script_version,
        true
    );

    // ‚úÖ NEW: Timeline booking script
    $timeline_path = RB_PLUGIN_DIR . 'assets/js/timeline-booking.js';
    $timeline_version = file_exists($timeline_path) ? filemtime($timeline_path) : RB_VERSION;
    wp_enqueue_script(
        'rb-timeline-booking',
        RB_PLUGIN_URL . 'assets/js/timeline-booking.js',
        array('jquery', 'rb-new-booking'),
        $timeline_version,
        true
    );

    wp_localize_script('rb-new-booking', 'rbBookingAjax', array(
        'ajaxUrl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('rb_frontend_nonce'),
        'languageNonce' => wp_create_nonce('rb_language_nonce'),
        'languageAction' => 'rb_switch_language',
        'shouldReloadOnLanguageChange' => true,
        'currentLanguage' => rb_get_current_language(),
    ));

    wp_localize_script('rb-new-booking', 'rbBookingStrings', array(
        // ... existing strings ...
        'checkInTime' => rb_t('check_in_time', 'Check-in time'),
        'duration' => rb_t('duration', 'Duration'),
        'availableCount' => rb_t('availability_tables_count', '{count} tables available'),
        'selectAlternativeTime' => rb_t('select_alternative_time', 'Select alternative time'),
        // ... more strings ...
    ));
}
```

---

## üß™ COMPREHENSIVE TEST CHECKLIST

### **Phase 5-6-7 Complete Test:**
```
‚úÖ Frontend Form Tests:

Time Selection:
‚òê Time slots load correctly
‚òê Time slots match location hours
‚òê Duration dropdown has all options (1-6h)
‚òê Time display updates on change
‚òê Checkout time calculated correctly
‚òê Cleanup end time = checkout + 15' + 1h
‚òê Mobile: dropdown clickable & usable
‚òê Keyboard: Tab navigation works

Availability Check:
‚òê Valid slot ‚Üí success message
‚òê Invalid slot ‚Üí error message + alternatives
‚òê Click alternative ‚Üí selects time & rechecks
‚òê Multiple alternatives show all options
‚òê Available count displayed correctly
‚òê Error message is clear & helpful

Form Submission:
‚òê Form submit with valid times
‚òê Booking saved with checkin/checkout
‚òê Data in database correct
‚òê Confirmation email includes times
‚òê Admin can see times in booking list

AJAX Tests:
‚òê get_checkout_time returns correct result
‚òê check_availability_extended validates correctly
‚òê Alternative times calculated properly
‚òê Error handling for invalid inputs
‚òê Nonce verification working
‚òê Response JSON valid

CSS & Styling:
‚òê Form section styled nicely
‚òê Inputs have proper borders/focus
‚òê Messages styled (green=success, red=error)
‚òê Buttons clickable & visible
‚òê Colors match design palette
‚òê Text readable (contrast OK)
‚òê Desktop layout looks good
‚òê Tablet layout responsive
‚òê Mobile layout works (vertical, fits screen)

JavaScript:
‚òê RBTimelineBooking class initializes
‚òê Events bound correctly
‚òê No console errors
‚òê AJAX calls working
‚òê Time calculations accurate
‚òê No memory leaks (check DevTools)

Translations:
‚òê All strings translated (3 languages)
‚òê Vietnamese: readable & correct
‚òê English: grammatically correct
‚òê Japanese: readable & correct
‚òê Language switcher changes all text
‚òê Date/time format localized
‚òê No fallback English strings visible
‚òê RTL support (if applicable)

Integration with Timeline:
‚òê Admin timeline shows check-in/out times
‚òê Booking cells positioned correctly
‚òê Timeline grid shows correct duration
‚òê Drag-and-drop still works
‚òê Check-in/out buttons still work
‚òê Status colors correct

Integration with Backend:
‚òê Phase 1 database schema used
‚òê Phase 2 backend methods called correctly
‚òê Phase 3 AJAX endpoints working
‚òê Phase 4 admin timeline shows data
‚òê No conflicts with existing features

Edge Cases:
‚òê Very short booking (1h)
‚òê Very long booking (6h)
‚òê Booking crossing midnight
‚òê Location with lunch break
‚òê Location with 2 shifts
‚òê Mobile: portrait ‚Üí landscape
‚òê Multiple locations: switching works
‚òê Multiple languages: switching works
‚òê No bookings available: suggestions shown
‚òê All alternatives unavailable: message shown

Performance:
‚òê AJAX calls < 500ms
‚òê Form renders quickly
‚òê Time slot generation fast
‚òê No lag when changing inputs
‚òê Smooth animations
‚òê No unnecessary re-renders

Browser Compatibility:
‚òê Chrome latest (desktop & mobile)
‚òê Firefox latest (desktop & mobile)
‚òê Safari latest (desktop & mobile)
‚òê Edge latest
‚òê Mobile browsers (iOS Safari, Chrome Mobile)

Accessibility:
‚òê Form labels present
‚òê ARIA attributes for status messages
‚òê Keyboard navigation: Tab/Enter/Escape
‚òê Focus visible on all inputs
‚òê Color not only indicator
‚òê Error messages descriptive
‚òê Mobile touch targets > 44px

Security:
‚òê Nonce verified before processing
‚òê current_user_can() check (if needed)
‚òê Input sanitization (sanitize_text_field, intval)
‚òê SQL injection prevention ($wpdb->prepare)
‚òê XSS prevention (esc_html, esc_attr)
‚òê CSRF protection via nonce

Backward Compatibility:
‚òê Old bookings without times still work
‚òê create_booking() without times works
‚òê Existing form fields still function
‚òê No breaking changes to API
‚òê Old shortcodes still work
‚òê Admin pages still work
```

---

## üìä FINAL DELIVERABLES

**Phase 5-6-7 Complete Package:**
```
‚úÖ Frontend Form Enhancement:
   - Time selection UI
   - Duration selector
   - Real-time calculations
   - Availability checking
   - Alternative suggestions

‚úÖ AJAX Endpoints:
   - get_checkout_time()
   - check_availability_extended()
   - Alternative time suggestions

‚úÖ Styling & Design:
   - timeline-booking.css (responsive)
   - Custom components styled
   - Mobile-friendly design
   - Color scheme consistent

‚úÖ JavaScript Functionality:
   - timeline-booking.js (RBTimelineBooking class)
   - Event handling
   - AJAX integration
   - Time calculations

‚úÖ Translations:
   - Vietnamese (vi_VN)
   - English (en_US)
   - Japanese (ja_JP)
   - All keys translated
   - Proper localization

‚úÖ Integration:
   - Works with Phase 1-4
   - Backend logic utilized
   - No breaking changes
   - Backward compatible

‚úÖ Testing:
   - All features tested
   - Edge cases covered
   - Performance verified
   - Security validated
   - Accessibility checked
```

---

## üöÄ POST-IMPLEMENTATION STEPS

After all 3 prompts completed & tested:
```
1. Code Review:
   ‚òê Review all code for standards
   ‚òê Check security implications
   ‚òê Verify performance
   ‚òê Test edge cases

2. Merge & Deploy:
   ‚òê Merge Phase 1-4 to main
   ‚òê Test on staging
   ‚òê Merge Phase 5-7 to main
   ‚òê Final integration test
   ‚òê Deploy to production

3. Post-Deploy:
   ‚òê Monitor error logs
   ‚òê Check performance metrics
   ‚òê Verify all features work
   ‚òê Gather user feedback
   ‚òê Document any issues

4. Documentation:
   ‚òê Update README
   ‚òê Add admin guide
   ‚òê Add user guide
   ‚òê API documentation
   ‚òê Changelog update

5. Release:
   ‚òê Bump version number
   ‚òê Update CHANGELOG
   ‚òê Commit with message
   ‚òê Tag release
   ‚òê Announce features
```

---

V·∫≠y l√† t√¥i ƒë√£ chu·∫©n b·ªã **3 prompt chi ti·∫øt** cho Claude Code:

1. ‚úÖ **Prompt Phase 1-2:** Database + Backend Logic
2. ‚úÖ **Prompt Phase 3-4:** AJAX + Admin UI  
3. ‚úÖ **Prompt Phase 5-6-7:** Frontend + Assets + Translations

**C√°ch th·ª±c hi·ªán:**
```
L·∫ßn 1: Phase 1-2 ‚Üí Test ‚Üí OK
        ‚Üì
L·∫ßn 2: Phase 3-4 ‚Üí Test ‚Üí OK
        ‚Üì
L·∫ßn 3: Phase 5-6-7 ‚Üí Test ‚Üí OK
        ‚Üì
Integration Test ‚Üí Deploy ‚Üí Done! üéâ
B·∫°n c√≥ c·∫ßn ƒëi·ªÅu ch·ªânh g√¨ hay s·∫µn s√†ng b·∫Øt ƒë·∫ßu v·ªõi Claude Code? 
